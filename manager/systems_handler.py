#!/usr/bin/python3

import json

from common import AuthenticatedHandler, parse_url, vmaas_call
from database.database_handler import DatabaseHandler


class SystemsHandler(AuthenticatedHandler):
    """Handler class returning data related to given CVE."""

    def get(self):
        """
        ---
        description: Get CVEs
        responses:
          200:
            description: Handler class returning data related to given CVE.
        """
        route = parse_url(self.request.uri, "/systems")
        if len(route) == 1:
            self.get_affected_systems()
        elif route[1] == "cves":
            self.get_system_cve_list(route[0])
        else:
            self.send_error(404)
        self.flush()

    def post(self):
        self.flush()

    def get_cve_details(self, synopsis):
        data = vmaas_call("/api/v1/cves", {"cve_list": [synopsis]})
        cve_list = data["cve_list"]
        if synopsis not in cve_list:
            self.send_error(404)
        else:
            self.write(json.dumps(cve_list[synopsis]))
        self.flush()

    def get_system_cve_list(self, system):
        res = {}
        try:
            cves = self.assign_cves(system)
            # See JSON API spec
            pagination_links = {"first": "http://...", "last": "http://...",
                                "prev": "http://...", "next": "http://..."}
            # Basically all interesting info about this API/Filters/Sorts/Limits..., example
            res["meta"] = {"page": 1, "per_page": 10,
                           "total": 150, "pages": 10, "sorted_by": "synopsis"}

            res["data"] = cves
            res["links"] = pagination_links
        except Exception as e:
            self.raiseError(500, str(e))
            return
        self.write(json.dumps(res))

    def assign_cves(self, system):
        result = []
        self.conn = DatabaseHandler.get_connection()
        cur = self.conn.cursor()
        cur.execute(
            "SELECT DISTINCT COUNT(sv.cve), sv.cve, vs.name \
            FROM system_vulnerabilities sv \
            JOIN system_platform sp ON sv.platform_id = sp.platform_id \
            JOIN vulnerability_source vs ON sv.vulnerability_source = vs.id \
            WHERE sp.rh_account = %s AND sv.platform_id = %s\
            GROUP BY sv.cve, sv.vulnerability_source, vs.name", (self.rh_account_number, system,)
        )
        cve_meta = cur.fetchall()
        if cve_meta:
            cve_list = {"cve_list": [cve[1] for cve in cve_meta]}
            cve_details = vmaas_call("/api/v1/cves", cve_list)
            cve_details = cve_details["cve_list"]
            for cve in cve_meta:
                entry = dict()
                res = {}
                cve_detail = cve_details[cve[1]]
                entry["systems_affected"] = cve[0]
                entry["celebrity"] = True if cve[2] == "RULES" else False
                entry["synopsis"] = cve_detail["synopsis"]
                entry["public_date"] = cve_detail["public_date"]
                entry["impact"] = cve_detail["impact"]
                entry["description"] = cve_detail["description"]
                entry["cvss_score"] = cve_detail["cvss3_score"]
                res["type"] = "cve"
                res["id"] = cve_detail["synopsis"]
                res["attributes"] = entry
                result.append(res)
        return result

    def get_affected_systems(self):
        self.conn = DatabaseHandler.get_connection()
        cur = self.conn.cursor()
        cur.execute(
            "SELECT s.platform_id FROM system_platform s\
            WHERE s.rh_account = %s", (self.rh_account_number,))
        affected_systems = []
        for system in cur.fetchall():
            system_entry = {}
            system_entry["type"] = "system"
            system_entry["id"] = system[0]
            system_entry["attributes"] = {"platform_id": system[0]}
            affected_systems.append(system_entry)
        res = {}
        res["data"] = affected_systems
        res["meta"] = {}
        self.write(json.dumps(res))
